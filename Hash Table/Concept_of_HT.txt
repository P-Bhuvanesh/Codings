In arrays we can store and retrieve data. It is in linear form i.e in contiguous and continuous memory allocation.

The storing of data in array: O(1) constant time
While retrieving of data    : O(log n)

For large dataset the retrieving of data takes long time. This is why the hashing data structure is introduced.

Components of Hashing Includes:
	-> Key [: input value]
	-> Hash Function [: Mathematical function to generate hash code]
	-> Hash value [:An unique value generated by hash function based on the key]
The hash value act as an index value to the key. This will be like key: value pair. hash value will be key, while input will be value.

Key properties of hash function: Deterministic, Fixed o/p size, efficiency, pre-image resistance, collision resistance, avalanche effect.

Application includes: Hash table, Data integrity, cryptography, data structures.

Hashing Problem: Collision 
	Collision in Hashing occurs when two different keys map to the same hash value. 

There are mainly two methods to handle collision: 
1. Separate Chaining
2. Open Addressing

Separate Chaining: The idea is to make each cell of the hash table point to a linked list of records that have the same hash value.

Open Addressing:
	i. Linear probing: The idea is to make each cell of the hash table point to a linked list of records that have the same hash function value. Chaining is simple but requires additional memory outside the table.

	ii. Quadratic Probing: if hash(x)%size is full then it will check (hash(x)+1^2)%size if it also occupied then it check the (hash(x)+2^2)%size,. (hash(x)+3^2)%size .... until the empty index i is found.
	
	iii. Double Hashing: If hash(x)%size is occupied then new hash => h(k,i) = (h1(k) +i*h2(k))%n
			     i -> non-neg num that ind a number of collision. k -> key which is hashed. n-> hash table size.
			     h1(k) = k mod 7 and h2(k) = 1 + (k mod 5)

Hash Table Operations

Insert (Put): 
	- Use the hash function to calculate the index for the key.
	- If the calculated index is empty, store the key-value pair there.
	- If there's a collision, apply a collision resolution technique (chaining or open addressing). 

Search (Get):
	- Use the hash function to find the index where the key should be located.
	- If the key is in that bucket, return the associated value.
	- If the key is not in that bucket or thereâ€™s a collision, resolve it by looking through the linked list (chaining) or probing (open addressing).

Delete (Remove):
	- Use the hash function to locate the key in the table.
	- Remove the key-value pair and resolve any collisions or update the table as necessary.
	
